generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb1_owner:z5IlHDR2CZLv@ep-odd-dust-a5zoinkm-pooler.us-east-2.aws.neon.tech/book-hive?sslmode=require&connect_timeout=15&pool_timeout=15"
}


model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  name         String
  phoneNumber  String?
  profileImage String?
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  rentals      Rental[]
  wallet       Wallet?
}

model Owner {
  id           String       @id @default(uuid())
  email        String       @unique
  password     String
  name         String
  phoneNumber  String?
  profileImage String?
  status       OwnerStatus  @default(INACTIVE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  location     String
  books        Book[]
  wallet       OwnerWallet?
}

model Book {
  id                Int        @id @default(autoincrement())
  title             String
  author            String
  coverImage        String
  description       String?
  category          Category   @relation(fields: [categoryId], references: [id])
  categoryId        Int
  quantity          Int
  availableQuantity Int
  price             Float
  status            BookStatus @default(PENDING)
  rating            Float?     @default(0.0)
  reviewCount       Int?       @default(0)
  owner             Owner      @relation(fields: [ownerId], references: [id])
  ownerId           String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  rentals           Rental[]
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  image String?
  books Book[]
}

model Rental {
  id        Int          @id @default(autoincrement())
  book      Book         @relation(fields: [bookId], references: [id])
  bookId    Int
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  startDate DateTime
  endDate   DateTime
  status    RentalStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Wallet {
  id      Int    @id @default(autoincrement())
  balance Float  @default(0)
  user    User   @relation(fields: [userId], references: [id])
  userId  String @unique
}

model OwnerWallet {
  id      Int    @id @default(autoincrement())
  balance Float  @default(0)
  owner   Owner  @relation(fields: [ownerId], references: [id])
  ownerId String @unique
}

enum Role {
  USER
  ADMIN
}

enum OwnerStatus {
  ACTIVE
  INACTIVE
}

enum BookStatus {
  PENDING
  APPROVED
  DISABLED
}

enum RentalStatus {
  ACTIVE
  RETURNED
  OVERDUE
}
